from adjacency_list_representation_of_graph import Graph, StringGraph, WeightedDirectedGraph, DirectedGraph

print("Normal Graph with integer vertices")
g = Graph(7)
g.add_edge(1, 2)
g.add_edge(1, 0)
g.add_edge(2, 3)
g.add_edge(0, 4)
g.add_edge(3, 4)
g.add_edge(3, 5)
g.add_edge(4, 5)
g.add_edge(5, 6)
g.print_adjacency_list()
g.bfs(1, 6)
g.dfs(0)
print("is cycle present in graph : ", g.contains_cycle())

print("\nString Graph")
cities = ["Delhi", "London", "Paris", "New York"]
g_string = StringGraph(cities)
g_string.add_edge("Delhi", "London")
g_string.add_edge("New York", "London")
g_string.add_edge("Delhi", "Paris")
g_string.add_edge("Paris", "New York")
g_string.print_adjacency_list()

print("\nWeighted Directed Graph")
nodes = [0, 1, 2, 3, 4]
wdg_string = WeightedDirectedGraph(nodes)
wdg_string.add_edge(0, 1, 1)
wdg_string.add_edge(1, 2, 1)
wdg_string.add_edge(0, 2, 4)
wdg_string.add_edge(0, 3, 7)
wdg_string.add_edge(2, 3, 2)
wdg_string.add_edge(3, 2, 2)
wdg_string.add_edge(3, 4, 3)
wdg_string.print_adjacency_list()
print("Shortest distance: ", wdg_string.dijkstra(0, 4))

print("\nDirected Graph")
dg = DirectedGraph(6)
dg.add_edge(0, 1)
dg.add_edge(1, 2)
dg.add_edge(2, 3)
dg.add_edge(0, 4)
dg.add_edge(0, 5)
dg.add_edge(5, 4)
print("does it contain cycle? : ", dg.is_contains_cycle())
